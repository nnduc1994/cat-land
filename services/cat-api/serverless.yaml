frameworkVersion: '>=1.38.0 <2.0.0'

service: cat-api

provider:
  name: aws
  runtime: nodejs10.x
  stage: ${opt:stage, 'dev'} # Set the default stage used. Default is dev
  region: eu-west-1

plugins:
  - serverless-offline
  - serverless-prune-plugin
  - serverless-webpack
  # - serverless-plugin-aws-alerts


   
custom:
  # plugins
  # prune:
  #   automatic: true
  #   number: 1
  webpack:
    excludeFiles: '**/*.test.js'
    packager: 'yarn'
    includeModules: true
  mongoUser:
    dev: cat-db-dev
    prod: ${ssm:/cat-land/${self:provider.stage}/mongo-user~true}
  mongoPassword:
    dev: Abcdev123
    prod: ${ssm:/cat-land/${self:provider.stage}/mongo-password~true}
  mongoDB:
    dev: cat-api-dev
    prod: cat-api-prod

functions:
  cat-list:
    handler: src/list.handler
    timeout: 10
    events:
      - http:
          path: v1/cats
          method: get
          request: 
            template:
              application/json: > 
                {
                  "limit": "$input.params('limit')",
                  "offset": "$input.params(offset)",
                  "name": "$input.param(name)",
                  "origin": "$input.param(origin)"
                }
          cors: true
    environment:
      mongoUser: ${self:custom.mongoUser.${self:provider.stage}}
      mongoPassword: ${self:custom.mongoPassword.${self:provider.stage}}
      mongoDB: ${self:custom.mongoDB.${self:provider.stage}}
      
  cat-get:
    handler: src/get.handler
    events:
      - http:
          path: v1/cats/{catId}
          method: get
          cors: true
    environment:
      mongoUser: ${self:custom.mongoUser.${self:provider.stage}}
      mongoPassword: ${self:custom.mongoPassword.${self:provider.stage}} 
      mongoDB: ${self:custom.mongoDB.${self:provider.stage}}

  